package cmd

import (
	"github.com/urfave/cli"
	models "zerodha.tech/janus/models"
	"zerodha.tech/janus/utils"
)

// CreateResource creates ad hoc resources and outputs manifests.
func (hub *Hub) CreateResource(config models.Config) cli.Command {
	return cli.Command{
		Name:    "create",
		Aliases: []string{"c"},
		Usage:   "Create ad-hoc resource(s) and merge with existing GitOps directory",
		Action:  hub.initApp(hub.create),
		Flags: []cli.Flag{
			cli.StringFlag{
				Name:  "resource, r",
				Usage: "Create manifests for only a particular resource `TYPE`",
			},
			cli.StringFlag{
				Name:  "name, n",
				Usage: "`NAME` of the resource to lookup in config. Use in combination with --resource",
			},
			cli.StringFlag{
				Name:  "path, p",
				Usage: "`PATH` to an existing GitOps directory generated by scaffold",
			},
			cli.StringFlag{
				Name:  "config",
				Usage: "Path to `FILE` config",
			},
		},
	}
}

func (hub *Hub) create(cliCtx *cli.Context) error {
	var (
		projectDir = utils.GetRootDir(cliCtx.String("path"))
	)
	err := utils.LookupGitopsDirectory(subPaths, projectDir)
	if err != nil {
		hub.Logger.Errorf("Output directory %s doesn't match the expected GitOps directory structure generated from `scaffold`", cliCtx.String("path"))
		return err
	}
	// If a particular resource type is selected, create manifest only for that
	// switch cliCtx.String("resource") {
	// case "deployment":
	// 	err := prepareResource(hub.Config.Deployments, cliCtx.String("name"), projectDir)
	// 	if err != nil {
	// 		return err
	// 	}

	// case "service":
	// 	err := createDeployment(hub.Config.Deployments, cliCtx.String("name"), projectDir)
	// 	if err != nil {
	// 		return err
	// 	}
	// 	// Create services
	// 	for _, svc := range hub.Config.Services {
	// 		if cliCtx.String("name") != "" {
	// 			if cliCtx.String("name") != svc.Name {
	// 				continue
	// 			}
	// 		}
	// 		err := utils.CreateResource(svc, projectDir)
	// 		if err != nil {
	// 			return err
	// 		}
	// 		hub.Logger.Debugf("Created manifest for service: %s", svc.Name)
	// 	}
	// case "ingress":
	// 	err := createDeployment(hub.Config.Deployments, cliCtx.String("name"), projectDir)
	// 	if err != nil {
	// 		return err
	// 	}
	// default:
	// 	return fmt.Errorf("Invalid resource type %s selected", cliCtx.String("resource"))
	// }
	return nil
}
